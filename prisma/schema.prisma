// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "cockroachdb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

//Member Model - A player or team member
model Member {
  id                     String         @id @default(uuid())
  firstName              String
  lastName               String
  email                  String?
  phone                  String?
  roles                  GroupRole[]
  createdAt              DateTime       @default(now())
  isProfileComplete      Boolean        @default(false)
  imageURL               String?
  stripeAccountId        String?
  stripeAccountComplete  Boolean        @default(false)
  groups                 Group[]        @relation("GroupMembers")
  contactPersonForGroups Group[]        @relation("GroupContactPerson")
  payments               UserPayment[]
  messages               Message[]
  guardians              Member[]       @relation("Guardian")
  guardianOf             Member[]       @relation("Guardian")
  events                 Event[]        @relation("EventInvitees")
  posts                  Post[]         @relation("PostAuthor")
  comments               Comment[]
  polls                  Poll[]         @relation("PollAuthor")
  notifications          Notification[]
  likes                  Like[]
  pollVotes              PollVote[]
  invitedToPosts         Post[]         @relation("PostInvitees")
  invitedToPolls         Poll[]         @relation("PollInvitees")

  // Remove duplicate fields and incorrect relations
  // Remove: Member, Group, Post, Poll fields
  Group   Group[]
  Payment Payment[]

  @@unique([email, id, phone])
}

//Group Model - A team or group
model Group {
  id              String      @id @default(uuid())
  name            String
  description     String?
  createdAt       DateTime    @default(now())
  logoURL         String?
  groupCode       String      @unique
  contactPersonId String
  contactPerson   Member      @relation("GroupContactPerson", fields: [contactPersonId], references: [id], onDelete: Restrict)
  subGroups       subGroup[]
  members         Member[]    @relation("GroupMembers")
  files           File[]
  roles           GroupRole[]
  activity        Activity
  events          Event[]
  payments        Payment[]
  messages        Message[]
  posts           Post[]
  polls           Poll[]

  // Remove duplicate fields
  // Remove: Member, Post fields
  Member   Member? @relation(fields: [memberId], references: [id])
  memberId String?

  @@index([contactPersonId])
  @@index([memberId])
}

//SubGroup Model - A sub team or group
model subGroup {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  color     String   @default("#000000")
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id])

  @@index([groupId])
}

//GroupRole Model - A role within a group
model GroupRole {
  id       String  @id @default(uuid())
  groupId  String
  group    Group   @relation(fields: [groupId], references: [id])
  roleName Role
  Member   Member? @relation(fields: [memberId], references: [id])
  memberId String?

  @@unique([groupId, id])
  @@index([groupId])
  @@index([memberId])
}

model Event {
  id                      String     @id @default(uuid())
  title                   String
  groupId                 String
  description             String?
  startDateTime           DateTime
  endDateTime             DateTime?
  address                 String?
  maxParticipants         Int?
  recurringEndDate        DateTime?
  repeatFrequency         String?
  reminders               Boolean
  notificationDate        DateTime?
  group                   Group      @relation(fields: [groupId], references: [id])
  invitees                Member[]   @relation("EventInvitees")
  feeAmount               Float?
  totalFeeAmount          Float?
  feeDescription          String?
  feeServiceCharge        Float?
  collectFeeServiceCharge Boolean?
  payments                Payment[]
  comments                Comment[]
  files                   File[]
  responses               Responses?
  responsesId             String     @unique

  // Remove this relation as it's already defined in the invitees field
  // Remove: Member, memberId

  @@index([groupId])
}

model Responses {
  id             String   @id @default(uuid())
  eventId        String   @unique
  acceptedIds    String[]
  declinedIds    String[]
  unconfirmedIds String[]

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}

model Payment {
  id            String        @id @default(uuid())
  createdAt     DateTime      @default(now())
  authorId      String
  title         String
  userId        String?
  eventId       String?
  amount        Float
  paymentStatus String
  description   String?
  dueDate       DateTime
  groupId       String
  users         UserPayment[]
  user          Member?       @relation(fields: [userId], references: [id])
  event         Event?        @relation(fields: [eventId], references: [id])
  group         Group         @relation(fields: [groupId], references: [id])

  @@index([userId])
  @@index([eventId])
  @@index([groupId])
}

model UserPayment {
  id        String @id @default(uuid())
  userId    String
  paymentId String

  user    Member  @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment Payment @relation(fields: [paymentId], references: [id])

  @@unique([userId, paymentId])
  @@index([userId])
  @@index([paymentId])
}

model Message {
  id           String   @id @default(uuid())
  senderUserId String
  groupId      String
  content      String
  timestamp    DateTime @default(now())

  sender Member @relation(fields: [senderUserId], references: [id], onDelete: Cascade)
  group  Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([senderUserId])
}

model Post {
  id        String   @id @default(uuid())
  authorId  String
  groupId   String
  content   String
  timestamp DateTime @default(now())

  author   Member    @relation(name: "PostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  group    Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  invitees Member[]  @relation("PostInvitees")
  comments Comment[]
  files    File[]
  likes    Like[]

  // Remove duplicate fields
  // Remove: Member, Group fields

  @@index([groupId])
  @@index([authorId])
}

model Comment {
  id        String   @id @default(uuid())
  authorId  String
  content   String
  timestamp DateTime @default(now())

  author Member @relation(fields: [authorId], references: [id], onDelete: Cascade)

  entityId   String
  entityType EntityType

  replies   Comment[] @relation("CommentReplies")
  replyTo   Comment?  @relation("CommentReplies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId String?

  likes Like[]

  // Remove these fields and relations as they're redundant with entityId and entityType
  // Remove: Event, eventId, Post, postId, Poll, pollId
  Event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?
  Post    Post?   @relation(fields: [postId], references: [id])
  postId  String?
  Poll    Poll?   @relation(fields: [pollId], references: [id])
  pollId  String?

  @@index([authorId])
  @@index([entityId])
  @@index([replyToId])
  @@index([eventId])
  @@index([postId])
  @@index([pollId])
}

model Like {
  id        String   @id @default(uuid())
  authorId  String
  timestamp DateTime @default(now())

  author     Member     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  entityId   String // ID of the related entity (Post, Event, Poll, Payment)
  entityType EntityType // Type of the entity (Post, Event, Poll, Payment)
  Post       Post?      @relation(fields: [postId], references: [id])
  postId     String?
  Comment    Comment?   @relation(fields: [commentId], references: [id])
  commentId  String?

  @@index([authorId])
  @@index([entityId])
  @@index([postId])
  @@index([commentId])
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  message    String
  read       Boolean
  timestamp  DateTime @default(now())
  resourceId String
  fromId     String
  type       String
  User       Member   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Poll {
  id            String    @id @default(uuid())
  groupId       String
  title         String
  description   String?
  createdAt     DateTime  @default(now())
  expiresAt     DateTime?
  authorId      String
  hideVotes     Boolean   @default(false)
  allowComments Boolean   @default(false)

  author   Member       @relation("PollAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  group    Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  invitees Member[]     @relation("PollInvitees")
  options  PollOption[]
  votes    PollVote[]
  comments Comment[]

  // Remove duplicate fields
  // Remove: Member field

  @@index([groupId])
  @@index([authorId])
}

model PollOption {
  id     String @id @default(uuid())
  pollId String
  text   String

  poll  Poll       @relation(fields: [pollId], references: [id])
  votes PollVote[]

  @@index([pollId])
}

model PollVote {
  userId   String
  optionId String

  user   Member     @relation(fields: [userId], references: [id], onDelete: Cascade)
  option PollOption @relation(fields: [optionId], references: [id])
  Poll   Poll?      @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String?

  @@id([userId, optionId])
  @@index([userId])
  @@index([optionId])
  @@index([pollId])
}

model File {
  id         String   @id @default(uuid())
  groupId    String
  fileName   String
  fileType   String
  uploadDate DateTime @default(now())

  url     String
  key     String
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  Post    Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String?
  Event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String?

  @@index([groupId])
  @@index([postId])
  @@index([eventId])
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

enum Role {
  GROUP_MANAGER
  COACH
  HELPER
}

enum EventType {
  PRACTICE
  GAME
  MEETING
  OTHER
}

enum Activity {
  BASEBALL
  BASKETBALL
  FOOTBALL
  SOCCER
  VOLLEYBALL
  OTHER
}

enum EntityType {
  POST
  EVENT
  POLL
  PAYMENT
  COMMENT
  REPLY
}
